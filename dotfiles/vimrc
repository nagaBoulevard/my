" PLUGINS {{{
" using vim-plug

" select the plugin directory
call plug#begin('~/.vim/plugged')

Plug 'morhetz/gruvbox'
Plug 'scrooloose/nerdcommenter'
Plug 'rust-lang/rust.vim'
Plug 'godlygeek/tabular'
Plug 'ibab/vim-snakemake'
Plug 'junegunn/goyo.vim'
Plug 'benmills/vimux'

call plug#end()

" }}}


" LOOK {{{

syntax enable
set background=dark
colo gruvbox
let g:gruvbox_contrast_dark='soft'

hi Normal		ctermbg=None
hi VertSplit	ctermbg=None
hi Folded		ctermbg=None	ctermfg=214		cterm=bold
hi FoldColumn	ctermbg=None
hi Tabline		ctermbg=None	ctermfg=243		cterm=bold
hi TabLineFill	ctermbg=None
hi TablineSel	ctermbg=None	ctermfg=9		cterm=bold
hi Pmenu		ctermbg=None	ctermfg=142
hi PmenuSel		ctermbg=None	ctermfg=9		cterm=reverse
hi StatusLineNC	ctermbg=None	ctermfg=243		cterm=bold

" change on insertmode
hi StatusLine					ctermbg=None	ctermfg=9 		cterm=bold
au InsertEnter * hi StatusLine	ctermbg=None	ctermfg=142		cterm=bold
au InsertLeave * hi StatusLine	ctermbg=None	ctermfg=9 		cterm=bold



" cropped filename : ft : percent_on_tot
set statusline=%=\ %.12F\ %y\ %p%%\ \ 
set fillchars=vert:\|,stl:\ ,stlnc:-
set laststatus=2

set encoding=utf8
set list listchars=tab:»\ ,trail:·

" }}}


" GENERAL {{{

set backspace=indent,eol,start				" real backspace
set autoindent
set smarttab
set tabstop=4 shiftwidth=4

set foldmethod=marker

set shiftround
set number									" display col numbers
set ruler									" display cursor position
set showcmd
set wildmenu								" autocomplete menu
set noshowmode								" hide the current mode
set completeopt=menuone,longest,preview

set autoread								" auto detect if a file has been changed from outside

set showmatch								" hi the matches
set incsearch								" incremental search, like in browsers
set hlsearch								" hi the mathces of search
set ignorecase								" ignore the case while searching
set smartcase								" be smart with the case while searching

set mouse=a									" mouse activate!
set hidden									" set abandoned buffers as hidden
set nobackup
set nowritebackup
set noswapfile
set fileformats=unix,dos,mac

" General }}}


" MAPPING {{{

" Following the idea from SpaceEmacs:
" 	W -> Window control
" 	Q -> Query command
" 	N -> autocomplete substitution
" 	D? -> Delete
" 	Z -> undo


" what should be standard
cnoreabbrev Q q
cnoreabbrev W w
cnoreabbrev E e
cnoreabbrev Wq wq
cnoreabbrev WQ wq

" remove the Ex mod
nnoremap q <nop>
nnoremap Q <nop>

" C-d delete word
inoremap <C-d><C-left> <C-w>
nnoremap <C-d><C-left> <C-w>

" FIXME NOT WORKING
" C-w control window
iunmap <C-w>
"imap <C-w><C-up> <Esc><C-w><C-up>a
"imap <C-w><C-down> <Esc><C-w><C-down>a
"imap <C-w><C-left> <Esc><C-w><C-left>a
"imap <C-w><C-right> <Esc><C-w><C-right>a

" query commands
map <C-q> :call InputCmd()<CR>


" undo
nnoremap <C-z> :undo<CR>
inoremap <C-z> <Esc>:undo<CR>i

" folds
nnoremap <space> za

" normal backspace
nmap <BS> i<BS><Esc>l

" Move lines up and down
noremap  <C-up>    :m-2<CR>
noremap  <C-down>  :m+1<CR>
inoremap <C-up>    <Esc>:m-2<CR>i
inoremap <C-down>  <Esc>:m+1<CR>i

" Tabs
nnoremap <C-t>     :tabnew<CR>
inoremap <C-t>     <Esc>:tabnew<CR>i

" leader
let mapleader = ';'

"identify the hi group at the cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
			\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
			\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Mapping }}}


" FUNCTIONS {{{
"
function! InputCmd()
	call inputsave()
	let cmd = input(':: ')
	redraw!
	execute cmd
	call inputrestore()
endfunction


" }}}


" PLUG-OPTIONS {{{
let g:VimuxHeight = "33"
" }}}


" FILETYPES {{{

au BufRead,BufNewFile *.bn set filetype=bnote
au BufRead,BufNewFile *.lp set filetype=lp

" support for snakemake is not working
au BufRead,BufNewFile Snakefile set ft=snakemake

" }}}
